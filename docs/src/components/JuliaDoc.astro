---

import {execSync} from 'child_process';
import { Markdown } from '@astropub/md'
import { Card } from '@astrojs/starlight/components';

const { module } = Astro.props;
const moduleLast = module.split('.').pop();
const scan_script = `julia --project=script -e '
using REPL
using JSON
using Jieko
using Markdown
using ${module}: ${moduleLast}

function extract_docs(mod::Module)
	stub = Jieko.stub(mod)
    docs = Dict{String, String}()
    for (sig, interface) in stub.interface
		mod, name = interface.mod, interface.name
        md = Docs.doc(Docs.Binding(mod, name))
        md.content[1].content[1].content[1].language = "julia"
        docs[string(name)] = string(md)
    end
    return docs
end
docs = extract_docs(${moduleLast})
JSON.print(docs)
'`;
const rawJSON = execSync(scan_script).toString();
const docs : Record<string, string> = JSON.parse(rawJSON);
const docBody = [];
for (const [key, value] of Object.entries(docs)) {
    docBody.push({module: moduleLast, name: key, body: value});
}
---

{docBody.map((item) => (
	<Card title={item.name}>
		<Markdown of={item.body}/>
	</Card>
))}