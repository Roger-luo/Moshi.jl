---

import {execSync} from 'child_process';
import { marked } from 'marked';

const { module } = Astro.props;
const moduleLast = module.split('.').pop();
const scan_script = `julia --project=script -e '
using REPL
using JSON
using Jieko
using Markdown
using ${module}: ${moduleLast}

function extract_docs(mod::Module)
    stub = getproperty(mod, Jieko.INTERFACE_STUB)
    docs = Dict{String, String}()
    for (name, interface) in stub
        md = Docs.doc(Docs.Binding(mod, name))
        md.content[1].content[1].content[1].language = "julia"
        docs[string(name)] = string(md)
    end
    return docs
end
docs = extract_docs(${moduleLast})
JSON.print(docs)
'`;
const rawJSON = execSync(scan_script).toString();
const docs : Record<string, string> = JSON.parse(rawJSON);
const docBody = [];
for (const [key, value] of Object.entries(docs)) {
    docBody.push({module: moduleLast, name: key, body: marked.parse(value)});
}

const generated = docBody.map(({name, body}) => {
    return `<article class="card sl-flex">
        <p class="title sl-flex">
            <span>${name}<span/>
        </p>
        <div class="body">${body}</div>
    </article>
    <style>
	.card {
		--sl-card-border: var(--sl-color-purple);
		--sl-card-bg: var(--sl-color-purple-low);
		border: 1px solid var(--sl-color-gray-5);
		background-color: var(--sl-color-black);
		padding: clamp(1rem, calc(0.125rem + 3vw), 2.5rem);
		flex-direction: column;
		gap: clamp(0.5rem, calc(0.125rem + 1vw), 1rem);
	}
	.card:nth-child(4n + 1) {
		--sl-card-border: var(--sl-color-orange);
		--sl-card-bg: var(--sl-color-orange-low);
	}
	.card:nth-child(4n + 3) {
		--sl-card-border: var(--sl-color-green);
		--sl-card-bg: var(--sl-color-green-low);
	}
	.card:nth-child(4n + 4) {
		--sl-card-border: var(--sl-color-red);
		--sl-card-bg: var(--sl-color-red-low);
	}
	.card:nth-child(4n + 5) {
		--sl-card-border: var(--sl-color-blue);
		--sl-card-bg: var(--sl-color-blue-low);
	}
	.title {
		font-weight: 600;
		font-size: var(--sl-text-h4);
		color: var(--sl-color-white);
		line-height: var(--sl-line-height-headings);
		gap: 1rem;
		align-items: center;
	}
	.card .icon {
		border: 1px solid var(--sl-card-border);
		background-color: var(--sl-card-bg);
		padding: 0.2em;
		border-radius: 0.25rem;
	}
	.card .body {
		margin: 0;
		font-size: clamp(var(--sl-text-sm), calc(0.5rem + 1vw), var(--sl-text-body));
	}
</style>
    `
}).join('\n');
---

<div set:html={generated}/>
